[{"title":"DragableClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Dragable Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DragableClass","url":"/Multilib-Rewrite/api/Dragable Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"DragableClass","url":"/Multilib-Rewrite/api/Dragable Class#new","content":"&lt;/&gt; Dragable Class.new( movable: GuiObject , draggable: GuiObject , ui: ScreenGui ) → &lt;DraggableClass&gt; Creates Dragable Class. "},{"title":"ParallelPackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Parallel Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ParallelPackage","url":"/Multilib-Rewrite/api/Parallel Package#functions","content":" "},{"title":"PutToParallel​","type":1,"pageTitle":"ParallelPackage","url":"/Multilib-Rewrite/api/Parallel Package#PutToParallel","content":"&lt;/&gt; Parallel Package:PutToParallel( scriptToUse: Script , where: Instance ) → &lt;Script, Actor &gt; Puts given script for later usage as a Parallel script. "},{"title":"MainPackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Main Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"MainPackage","url":"/Multilib-Rewrite/api/Main Package#functions","content":" "},{"title":"Init​","type":1,"pageTitle":"MainPackage","url":"/Multilib-Rewrite/api/Main Package#Init","content":"&lt;/&gt; Main Package:Init() → () Initializes Packages. "},{"title":"MarketplacePackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Marketplace Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"MarketplacePackage","url":"/Multilib-Rewrite/api/Marketplace Package#functions","content":" "},{"title":"CheckPlayerGamepass​","type":1,"pageTitle":"MarketplacePackage","url":"/Multilib-Rewrite/api/Marketplace Package#CheckPlayerGamepass","content":"&lt;/&gt; Marketplace Package:CheckPlayerGamepass( id: number, prompt: boolean, player: Player? ) → &lt;true | false&gt; Checks if given player have given gamepass.  "},{"title":"PromptProductPurchase​","type":1,"pageTitle":"MarketplacePackage","url":"/Multilib-Rewrite/api/Marketplace Package#PromptProductPurchase","content":"&lt;/&gt; Marketplace Package:PromptProductPurchase( id: number, player: Player ) → () Prompts given product to given player.  "},{"title":"PromptPremiumPurchase​","type":1,"pageTitle":"MarketplacePackage","url":"/Multilib-Rewrite/api/Marketplace Package#PromptPremiumPurchase","content":"&lt;/&gt; Marketplace Package:PromptPremiumPurchase(player: Player ) → () Prompts Roblox Premium to given player. "},{"title":"ObserverClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Observer Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ObserverClass","url":"/Multilib-Rewrite/api/Observer Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ObserverClass","url":"/Multilib-Rewrite/api/Observer Class#new","content":"&lt;/&gt; Observer Class.new(value: any) → &lt;ObserverClass&gt; Creates Observer Class.  "},{"title":"Set​","type":1,"pageTitle":"ObserverClass","url":"/Multilib-Rewrite/api/Observer Class#Set","content":"&lt;/&gt; Observer Class:Set(value: any) → () Sets the value of Observer Class.  "},{"title":"Connect​","type":1,"pageTitle":"ObserverClass","url":"/Multilib-Rewrite/api/Observer Class#Connect","content":"&lt;/&gt; Observer Class:Connect( conName: string, ConFunc: (any) → nil ) → () Connects a function that will be executed on every value change from Observer:Set() function.  "},{"title":"Disconnect​","type":1,"pageTitle":"ObserverClass","url":"/Multilib-Rewrite/api/Observer Class#Disconnect","content":"&lt;/&gt; Observer Class:Disconnect(conName: string) → () Disconnects function.  "},{"title":"MiddlewareConnect​","type":1,"pageTitle":"ObserverClass","url":"/Multilib-Rewrite/api/Observer Class#MiddlewareConnect","content":"&lt;/&gt; Observer Class:MiddlewareConnect( conName: string, ConFunc: (any) → any | nil ) → () Connects a function that will be executed on every value change from Observer:Set() function. the diffrence here is that Middleware function are executed before the value is set up, and they also allow for chaning the value via return.  "},{"title":"MiddelwareDisconnect​","type":1,"pageTitle":"ObserverClass","url":"/Multilib-Rewrite/api/Observer Class#MiddelwareDisconnect","content":"&lt;/&gt; Observer Class:MiddelwareDisconnect(conName: string) → () Disconnects Middleware function.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"ObserverClass","url":"/Multilib-Rewrite/api/Observer Class#DisconnectAll","content":"&lt;/&gt; Observer Class:DisconnectAll() → () Disconnects all functions and all Middleware functions.  "},{"title":"Destroy​","type":1,"pageTitle":"ObserverClass","url":"/Multilib-Rewrite/api/Observer Class#Destroy","content":"&lt;/&gt; Observer Class:Destroy() → () Destroys Observer Class. "},{"title":"PlayerAdditionsPackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/PlayerAdditions Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"PlayerAdditionsPackage","url":"/Multilib-Rewrite/api/PlayerAdditions Package#functions","content":" "},{"title":"IsFirstPerson​","type":1,"pageTitle":"PlayerAdditionsPackage","url":"/Multilib-Rewrite/api/PlayerAdditions Package#IsFirstPerson","content":"&lt;/&gt; PlayerAdditions Package:IsFirstPerson(threshold: number) → &lt;true | false&gt; Checks if the player is in first person.  "},{"title":"ForceFirstPerson​","type":1,"pageTitle":"PlayerAdditionsPackage","url":"/Multilib-Rewrite/api/PlayerAdditions Package#ForceFirstPerson","content":"&lt;/&gt; PlayerAdditions Package:ForceFirstPerson(State: boolean) → () Sets player CameraMode. "},{"title":"NumberComputerClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/NumberComputer Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"NumberComputerClass","url":"/Multilib-Rewrite/api/NumberComputer Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"NumberComputerClass","url":"/Multilib-Rewrite/api/NumberComputer Class#new","content":"&lt;/&gt; NumberComputer Class.new(baseValue: number) → &lt;NumberComputerClass&gt; Creates NumberComputer Class.  "},{"title":"GetValue​","type":1,"pageTitle":"NumberComputerClass","url":"/Multilib-Rewrite/api/NumberComputer Class#GetValue","content":"&lt;/&gt; NumberComputer Class:GetValue(reCompute: boolean?) → &lt;number&gt; Returns computed value.  "},{"title":"UpdateOperation​","type":1,"pageTitle":"NumberComputerClass","url":"/Multilib-Rewrite/api/NumberComputer Class#UpdateOperation","content":"&lt;/&gt; NumberComputer Class:UpdateOperation( operationName: string, operationBaseNumber: number ) → () Updates existing operation with new parameters.  "},{"title":"InsertOperation​","type":1,"pageTitle":"NumberComputerClass","url":"/Multilib-Rewrite/api/NumberComputer Class#InsertOperation","content":"&lt;/&gt; NumberComputer Class:InsertOperation( operationName: string, operationBaseNumber: number, operationType: string ) → () Inserts new operation to be computed.  "},{"title":"RemoveOperation​","type":1,"pageTitle":"NumberComputerClass","url":"/Multilib-Rewrite/api/NumberComputer Class#RemoveOperation","content":"&lt;/&gt; NumberComputer Class:RemoveOperation(operationName: string) → () Removes given operation.  "},{"title":"Connect​","type":1,"pageTitle":"NumberComputerClass","url":"/Multilib-Rewrite/api/NumberComputer Class#Connect","content":"&lt;/&gt; NumberComputer Class:Connect( conName: string, ConFunc: ( number, number ) → nil ) → () Connects a function that will be executed after any change.  "},{"title":"Disconnect​","type":1,"pageTitle":"NumberComputerClass","url":"/Multilib-Rewrite/api/NumberComputer Class#Disconnect","content":"&lt;/&gt; NumberComputer Class:Disconnect(conName: string) → () Disconnects a function that would be executed after any change.  "},{"title":"Destroy​","type":1,"pageTitle":"NumberComputerClass","url":"/Multilib-Rewrite/api/NumberComputer Class#Destroy","content":"&lt;/&gt; NumberComputer Class:Destroy() → () Destroys NumberComputer Class. "},{"title":"MathPackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Math Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"MathPackage","url":"/Multilib-Rewrite/api/Math Package#functions","content":" "},{"title":"Chance​","type":1,"pageTitle":"MathPackage","url":"/Multilib-Rewrite/api/Math Package#Chance","content":"&lt;/&gt; Math Package:Chance( percent: number, max: number ) → &lt;true | false&gt; Return if succeded with given chance.  "},{"title":"Choose​","type":1,"pageTitle":"MathPackage","url":"/Multilib-Rewrite/api/Math Package#Choose","content":"&lt;/&gt; Math Package:Choose(table: {}) → &lt;true | false&gt; Chooses element from table.  "},{"title":"ReturnChance​","type":1,"pageTitle":"MathPackage","url":"/Multilib-Rewrite/api/Math Package#ReturnChance","content":"&lt;/&gt; Math Package:ReturnChance( percent: number, total: number ) → &lt;true | false&gt; Returns chance. Provided by https://github.com/AlwaysSunnySani  "},{"title":"Lerp​","type":1,"pageTitle":"MathPackage","url":"/Multilib-Rewrite/api/Math Package#Lerp","content":"&lt;/&gt; Math Package:Lerp( a: number, b: number, t: number ) → &lt;true | false&gt; Lerping for single value.  "},{"title":"LerpVector3​","type":1,"pageTitle":"MathPackage","url":"/Multilib-Rewrite/api/Math Package#LerpVector3","content":"&lt;/&gt; Math Package:LerpVector3( v3: Vector3 , goal: Vector3 , alpha: number ) → &lt;true | false&gt; Lerping for Vector3. Provided by https://github.com/NiceAssasin123 "},{"title":"LoggerPackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Logger Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"LoggerPackage","url":"/Multilib-Rewrite/api/Logger Package#functions","content":" "},{"title":"Print​","type":1,"pageTitle":"LoggerPackage","url":"/Multilib-Rewrite/api/Logger Package#Print","content":"&lt;/&gt; Logger Package:Print( parentScript: Script , content: any, force: boolean? ) → () Prints given message, can be forced to do even if logger is disabled for some reason.  "},{"title":"Warn​","type":1,"pageTitle":"LoggerPackage","url":"/Multilib-Rewrite/api/Logger Package#Warn","content":"&lt;/&gt; Logger Package:Warn( parentScript: Script , content: any, force: boolean? ) → () Warns given message, can be forced to do even if logger is disabled for some reason.  "},{"title":"Error​","type":1,"pageTitle":"LoggerPackage","url":"/Multilib-Rewrite/api/Logger Package#Error","content":"&lt;/&gt; Logger Package:Error( parentScript: Script , content: any, force: boolean? ) → () Errors given message, can be forced to do even if logger is disabled for some reason.  "},{"title":"LoggerSetter​","type":1,"pageTitle":"LoggerPackage","url":"/Multilib-Rewrite/api/Logger Package#LoggerSetter","content":"&lt;/&gt; Logger Package:LoggerSetter(value: boolean) → () Changes IsEnabled status. "},{"title":"DampedSpringClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/DampedSpring Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DampedSpringClass","url":"/Multilib-Rewrite/api/DampedSpring Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"DampedSpringClass","url":"/Multilib-Rewrite/api/DampedSpring Class#new","content":"&lt;/&gt; DampedSpring Class.new( position: number, mass: number, target: number, speed: number, velocity: number, constant: number, dampingC: number ) → &lt;DampedSpringClass&gt; Creates DampedSpring Class.  "},{"title":"SetTarget​","type":1,"pageTitle":"DampedSpringClass","url":"/Multilib-Rewrite/api/DampedSpring Class#SetTarget","content":"&lt;/&gt; DampedSpring Class:SetTarget(target: number) → () Sets target for DampedSpring Class.  "},{"title":"Update​","type":1,"pageTitle":"DampedSpringClass","url":"/Multilib-Rewrite/api/DampedSpring Class#Update","content":"&lt;/&gt; DampedSpring Class:Update(deltaTime: number) → () Updates position for DampedSpring Class.  "},{"title":"Destroy​","type":1,"pageTitle":"DampedSpringClass","url":"/Multilib-Rewrite/api/DampedSpring Class#Destroy","content":"&lt;/&gt; DampedSpring Class:Destroy() → () Destroys DampedSpring Class. "},{"title":"DropDownOption","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/DropDownOption","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DropDownOption","url":"/Multilib-Rewrite/api/DropDownOption#functions","content":" "},{"title":"new​","type":1,"pageTitle":"DropDownOption","url":"/Multilib-Rewrite/api/DropDownOption#new","content":"&lt;/&gt; DropDownOption.new( model: any, elements: {GuiObject }, IdName: string, DropDownMenu: {}, useSettings: Mtypes.DropDownOption? ) → &lt;table&gt;-- [DropDownOption Object] Constructor for DropDownOption object.  "},{"title":"Init​","type":1,"pageTitle":"DropDownOption","url":"/Multilib-Rewrite/api/DropDownOption#Init","content":"&lt;/&gt; DropDownOption:Init() → () should be called only via Form:InitAll().  "},{"title":"LockStatus​","type":1,"pageTitle":"DropDownOption","url":"/Multilib-Rewrite/api/DropDownOption#LockStatus","content":"&lt;/&gt; DropDownOption:LockStatus(status: boolean) → () Changes the DropDownOption.locked property.  "},{"title":"Append​","type":1,"pageTitle":"DropDownOption","url":"/Multilib-Rewrite/api/DropDownOption#Append","content":"&lt;/&gt; DropDownOption:Append(where: any) → () Sets the Parent of the DropDownOption.model.  "},{"title":"Destroy​","type":1,"pageTitle":"DropDownOption","url":"/Multilib-Rewrite/api/DropDownOption#Destroy","content":"&lt;/&gt; DropDownOption:Destroy() → () Destructor for DropDownOption object. "},{"title":"StringPackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/String Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"StringPackage","url":"/Multilib-Rewrite/api/String Package#functions","content":" "},{"title":"SplitStringByCapitalLetters​","type":1,"pageTitle":"StringPackage","url":"/Multilib-Rewrite/api/String Package#SplitStringByCapitalLetters","content":"&lt;/&gt; String Package:SplitStringByCapitalLetters(string: string) → &lt;string&gt; Splits string by capital letters. Provided by https://github.com/NiceAssasin123 "},{"title":"AnimatorClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Animator Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"AnimatorClass","url":"/Multilib-Rewrite/api/Animator Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"AnimatorClass","url":"/Multilib-Rewrite/api/Animator Class#new","content":"&lt;/&gt; Animator Class.new(animator: Animator ) → &lt;AnimatorClass&gt; Creates Animator Class.  "},{"title":"NewCategory​","type":1,"pageTitle":"AnimatorClass","url":"/Multilib-Rewrite/api/Animator Class#NewCategory","content":"&lt;/&gt; Animator Class:NewCategory(categoryName: string) → () Creates new category inside Animator Class.  "},{"title":"InsertNew​","type":1,"pageTitle":"AnimatorClass","url":"/Multilib-Rewrite/api/Animator Class#InsertNew","content":"&lt;/&gt; Animator Class:InsertNew( anim: Animation | number, animName: string, categoryName: string? ) → () Inserts new animation to Animator Class.  "},{"title":"RemoveAnim​","type":1,"pageTitle":"AnimatorClass","url":"/Multilib-Rewrite/api/Animator Class#RemoveAnim","content":"&lt;/&gt; Animator Class:RemoveAnim( animName: string, categoryName: string? ) → () Removes animation from given category, if no categoryName is provided then will remove animation from Uncategorized category.  "},{"title":"GetRandom​","type":1,"pageTitle":"AnimatorClass","url":"/Multilib-Rewrite/api/Animator Class#GetRandom","content":"&lt;/&gt; Animator Class:GetRandom(categoryName: string) → &lt;Animation &gt; Returns random animation from given category.  "},{"title":"Destroy​","type":1,"pageTitle":"AnimatorClass","url":"/Multilib-Rewrite/api/Animator Class#Destroy","content":"&lt;/&gt; Animator Class:Destroy() → () Destroys Animator Class. "},{"title":"TablePackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Table Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TablePackage","url":"/Multilib-Rewrite/api/Table Package#functions","content":" "},{"title":"DeepCopy​","type":1,"pageTitle":"TablePackage","url":"/Multilib-Rewrite/api/Table Package#DeepCopy","content":"&lt;/&gt; Table Package:DeepCopy(tableToCopy: {}) → &lt;table&gt; Deep copy of a given table. "},{"title":"InstancePackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Instance Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"InstancePackage","url":"/Multilib-Rewrite/api/Instance Package#functions","content":" "},{"title":"Create​","type":1,"pageTitle":"InstancePackage","url":"/Multilib-Rewrite/api/Instance Package#Create","content":"&lt;/&gt; Instance Package:Create( instanceName: string, parent: Instance , proporties: {} ) → &lt;Instance &gt; Creates and returns object.  "},{"title":"PerfectClone​","type":1,"pageTitle":"InstancePackage","url":"/Multilib-Rewrite/api/Instance Package#PerfectClone","content":"&lt;/&gt; Instance Package:PerfectClone( trueModel: any, trueElements: {} ) → &lt;Instance, {string=Instance }&gt; Clones and returns provided paths.  "},{"title":"SoundFX​","type":1,"pageTitle":"InstancePackage","url":"/Multilib-Rewrite/api/Instance Package#SoundFX","content":"&lt;/&gt; Instance Package:SoundFX( where: Instance | Vector3 , specs: Mtypes.SoundSpecs ) → &lt;Sound &gt; Creates and returns sound.  "},{"title":"ParticleFX​","type":1,"pageTitle":"InstancePackage","url":"/Multilib-Rewrite/api/Instance Package#ParticleFX","content":"&lt;/&gt; Instance Package:ParticleFX( particle: Instance , strength: number, where: Instance | Vector3 , WhereSize: Vector3? ) → &lt;ParticleEmitter &gt; Copies already existing particle emitter and puts it in given location, then emits it and deletes after emit is done.  "},{"title":"Motor6D​","type":1,"pageTitle":"InstancePackage","url":"/Multilib-Rewrite/api/Instance Package#Motor6D","content":"&lt;/&gt; Instance Package:Motor6D( first: Instance , second: Instance , parent: Instance ) → &lt;Motor6D &gt; Returns Motor6D.  "},{"title":"Animation​","type":1,"pageTitle":"InstancePackage","url":"/Multilib-Rewrite/api/Instance Package#Animation","content":"&lt;/&gt; Instance Package:Animation( id: number, animator: Animator ) → &lt;Animation &gt; Returns Animation.  "},{"title":"SetMinSoundTime​","type":1,"pageTitle":"InstancePackage","url":"/Multilib-Rewrite/api/Instance Package#SetMinSoundTime","content":"&lt;/&gt; Instance Package:SetMinSoundTime(time: number) → () Sets MinSoundTime.  "},{"title":"SetMinParticleTime​","type":1,"pageTitle":"InstancePackage","url":"/Multilib-Rewrite/api/Instance Package#SetMinParticleTime","content":"&lt;/&gt; Instance Package:SetMinParticleTime(time: number) → () Sets MinParticleTime. "},{"title":"RadioButton","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/RadioButton","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RadioButton","url":"/Multilib-Rewrite/api/RadioButton#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RadioButton","url":"/Multilib-Rewrite/api/RadioButton#new","content":"&lt;/&gt; RadioButton.new( model: any, elements: {GuiObject }, IdName: string, radioGroup: {}, useSettings: Mtypes.RadioButton? ) → &lt;table&gt;-- [RadioButton Object] Constructor for RadioButton object.  "},{"title":"Init​","type":1,"pageTitle":"RadioButton","url":"/Multilib-Rewrite/api/RadioButton#Init","content":"&lt;/&gt; RadioButton:Init() → () should be called only via Form:InitAll().  "},{"title":"LockStatus​","type":1,"pageTitle":"RadioButton","url":"/Multilib-Rewrite/api/RadioButton#LockStatus","content":"&lt;/&gt; RadioButton:LockStatus(status: boolean) → () Changes the RadioButton.locked property.  "},{"title":"Append​","type":1,"pageTitle":"RadioButton","url":"/Multilib-Rewrite/api/RadioButton#Append","content":"&lt;/&gt; RadioButton:Append(where: any) → () Sets the Parent of the RadioButton.model.  "},{"title":"Destroy​","type":1,"pageTitle":"RadioButton","url":"/Multilib-Rewrite/api/RadioButton#Destroy","content":"&lt;/&gt; RadioButton:Destroy() → () Destructor for RadioButton object. "},{"title":"ArrowChange","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/ArrowChange","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ArrowChange","url":"/Multilib-Rewrite/api/ArrowChange#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ArrowChange","url":"/Multilib-Rewrite/api/ArrowChange#new","content":"&lt;/&gt; ArrowChange.new( model: any, elements: {GuiObject }, IdName: string, useSettings: Mtypes.ArrowChange? ) → &lt;table&gt;-- [ArrowChange Object] Constructor for ArrowChange object.  "},{"title":"Init​","type":1,"pageTitle":"ArrowChange","url":"/Multilib-Rewrite/api/ArrowChange#Init","content":"&lt;/&gt; ArrowChange:Init() → () should be called only via Form:InitAll().  "},{"title":"UpdateValues​","type":1,"pageTitle":"ArrowChange","url":"/Multilib-Rewrite/api/ArrowChange#UpdateValues","content":"&lt;/&gt; ArrowChange:UpdateValues( values: any, index: number? ) → () Updates the values and index (optional).  "},{"title":"ReturnValues​","type":1,"pageTitle":"ArrowChange","url":"/Multilib-Rewrite/api/ArrowChange#ReturnValues","content":"&lt;/&gt; ArrowChange:ReturnValues() → &lt;boolean,string&gt;-- [value and IdName of the object] Returns value and IdName of the object.  "},{"title":"LockStatus​","type":1,"pageTitle":"ArrowChange","url":"/Multilib-Rewrite/api/ArrowChange#LockStatus","content":"&lt;/&gt; ArrowChange:LockStatus(status: boolean) → () Changes the ArrowChange.locked property.  "},{"title":"Append​","type":1,"pageTitle":"ArrowChange","url":"/Multilib-Rewrite/api/ArrowChange#Append","content":"&lt;/&gt; ArrowChange:Append(where: any) → () Sets the Parent of the ArrowChange.model.  "},{"title":"AddAction​","type":1,"pageTitle":"ArrowChange","url":"/Multilib-Rewrite/api/ArrowChange#AddAction","content":"&lt;/&gt; ArrowChange:AddAction( actionName: string, action: any ) → () Adds action that will be executed on every value change.  "},{"title":"RemoveAction​","type":1,"pageTitle":"ArrowChange","url":"/Multilib-Rewrite/api/ArrowChange#RemoveAction","content":"&lt;/&gt; ArrowChange:RemoveAction(actionName: string) → () Removes action that would be executed on every value change.  "},{"title":"Destroy​","type":1,"pageTitle":"ArrowChange","url":"/Multilib-Rewrite/api/ArrowChange#Destroy","content":"&lt;/&gt; ArrowChange:Destroy() → () Destructor for ArrowChange object. "},{"title":"TweenerClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Tweener Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TweenerClass","url":"/Multilib-Rewrite/api/Tweener Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"TweenerClass","url":"/Multilib-Rewrite/api/Tweener Class#new","content":"&lt;/&gt; Tweener Class.new( time: number, defaultStyle: Enum.EasingStyle, defaultDirection: Enum.EasingDirection ) → &lt;TweenerClass&gt; Creates Tweener Class.  "},{"title":"TweenTable​","type":1,"pageTitle":"TweenerClass","url":"/Multilib-Rewrite/api/Tweener Class#TweenTable","content":"&lt;/&gt; Tweener Class:TweenTable( tableToUse: {}, time: number?, style: Enum.EasingStyle?, direction: Enum.EasingDirection?, funcAfter: any? ) → () Tweens given table.  "},{"title":"TweenOnce​","type":1,"pageTitle":"TweenerClass","url":"/Multilib-Rewrite/api/Tweener Class#TweenOnce","content":"&lt;/&gt; Tweener Class:TweenOnce( element: any, time: number?, style: Enum.EasingStyle?, direction: Enum.EasingDirection?, funcAfter: any? ) → () Tweens given element.  "},{"title":"Destroy​","type":1,"pageTitle":"TweenerClass","url":"/Multilib-Rewrite/api/Tweener Class#Destroy","content":"&lt;/&gt; Tweener Class:Destroy() → () Destroys Tweener Class. "},{"title":"GoogleSpreadsheetLoggerClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/GoogleSpreadsheetLogger Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"GoogleSpreadsheetLoggerClass","url":"/Multilib-Rewrite/api/GoogleSpreadsheetLogger Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"GoogleSpreadsheetLoggerClass","url":"/Multilib-Rewrite/api/GoogleSpreadsheetLogger Class#new","content":"&lt;/&gt; GoogleSpreadsheetLogger Class.new( formKey: string, shouldLog: boolean? ) → &lt;GoogleSpreadsheetLogger&gt; Creates GoogleSpreadsheetLogger Class.  "},{"title":"AddNewOption​","type":1,"pageTitle":"GoogleSpreadsheetLoggerClass","url":"/Multilib-Rewrite/api/GoogleSpreadsheetLogger Class#AddNewOption","content":"&lt;/&gt; GoogleSpreadsheetLogger Class:AddNewOption( optionAlias: string, optionKey: number, optionType: string, optionAnwers: {}? ) → () Adds new option to GoogleSpreadsheetLogger Class.  "},{"title":"Log​","type":1,"pageTitle":"GoogleSpreadsheetLoggerClass","url":"/Multilib-Rewrite/api/GoogleSpreadsheetLogger Class#Log","content":"&lt;/&gt; GoogleSpreadsheetLogger Class:Log(toSend: {}) → () Logs things to Google Spreadsheet.  "},{"title":"Destroy​","type":1,"pageTitle":"GoogleSpreadsheetLoggerClass","url":"/Multilib-Rewrite/api/GoogleSpreadsheetLogger Class#Destroy","content":"&lt;/&gt; GoogleSpreadsheetLogger Class:Destroy() → () Destroys the GoogleSpreadsheetLogger Class. "},{"title":"SharedPlayerPackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Shared Player Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SharedPlayerPackage","url":"/Multilib-Rewrite/api/Shared Player Package#functions","content":" "},{"title":"ReturnPlayerByPart​","type":1,"pageTitle":"SharedPlayerPackage","url":"/Multilib-Rewrite/api/Shared Player Package#ReturnPlayerByPart","content":"&lt;/&gt; Shared Player Package:ReturnPlayerByPart(part: Instance ) → &lt;Player | false&gt; Tries to find Player by part.  "},{"title":"ReturnCharacterByPart​","type":1,"pageTitle":"SharedPlayerPackage","url":"/Multilib-Rewrite/api/Shared Player Package#ReturnCharacterByPart","content":"&lt;/&gt; Shared Player Package:ReturnCharacterByPart(part: Instance ) → &lt;Instance | false&gt; Tries to find Character by part. "},{"title":"CheckBox","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/CheckBox","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"CheckBox","url":"/Multilib-Rewrite/api/CheckBox#functions","content":" "},{"title":"new​","type":1,"pageTitle":"CheckBox","url":"/Multilib-Rewrite/api/CheckBox#new","content":"&lt;/&gt; CheckBox.new( model: any, elements: {GuiObject }, IdName: string, useSettings: Mtypes.CheckBox? ) → &lt;table&gt;-- [Checkbox Object] Constructor for CheckBox object.  "},{"title":"Init​","type":1,"pageTitle":"CheckBox","url":"/Multilib-Rewrite/api/CheckBox#Init","content":"&lt;/&gt; CheckBox:Init() → () should be called only via Form:InitAll().  "},{"title":"ReturnValues​","type":1,"pageTitle":"CheckBox","url":"/Multilib-Rewrite/api/CheckBox#ReturnValues","content":"&lt;/&gt; CheckBox:ReturnValues() → &lt;boolean,string&gt;-- [value and IdName of the object] Returns value and IdName of the object.  "},{"title":"LockStatus​","type":1,"pageTitle":"CheckBox","url":"/Multilib-Rewrite/api/CheckBox#LockStatus","content":"&lt;/&gt; CheckBox:LockStatus(status: boolean) → () Changes the CheckBox.locked property.  "},{"title":"Append​","type":1,"pageTitle":"CheckBox","url":"/Multilib-Rewrite/api/CheckBox#Append","content":"&lt;/&gt; CheckBox:Append(where: any) → () Sets the Parent of the CheckBox.model.  "},{"title":"AddAction​","type":1,"pageTitle":"CheckBox","url":"/Multilib-Rewrite/api/CheckBox#AddAction","content":"&lt;/&gt; CheckBox:AddAction( actionName: string, action: any ) → () Adds action that will be executed on every value change.  "},{"title":"RemoveAction​","type":1,"pageTitle":"CheckBox","url":"/Multilib-Rewrite/api/CheckBox#RemoveAction","content":"&lt;/&gt; CheckBox:RemoveAction(actionName: string) → () Removes action that would be executed on every value change.  "},{"title":"Destroy​","type":1,"pageTitle":"CheckBox","url":"/Multilib-Rewrite/api/CheckBox#Destroy","content":"&lt;/&gt; CheckBox:Destroy() → () Destructor for CheckBox object. "},{"title":"AlertsPackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Alerts Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"AlertsPackage","url":"/Multilib-Rewrite/api/Alerts Package#functions","content":" "},{"title":"AppendInfoAlert​","type":1,"pageTitle":"AlertsPackage","url":"/Multilib-Rewrite/api/Alerts Package#AppendInfoAlert","content":"&lt;/&gt; Alerts Package:AppendInfoAlert( title: string, description: string, imageID: number? ) → () Appends info alert on screen with given proporties, then yields until player input is provided.  "},{"title":"AppendChoiceAlert​","type":1,"pageTitle":"AlertsPackage","url":"/Multilib-Rewrite/api/Alerts Package#AppendChoiceAlert","content":"&lt;/&gt; Alerts Package:AppendChoiceAlert( title: string, description: string, imageID: number? ) → &lt;true | false&gt; Appends choice alert on screen with given proporties, then yields until player input is provided.  "},{"title":"SetInfoAlertConfig​","type":1,"pageTitle":"AlertsPackage","url":"/Multilib-Rewrite/api/Alerts Package#SetInfoAlertConfig","content":"&lt;/&gt; Alerts Package:SetInfoAlertConfig( appearWhere: GuiObject , template: GuiObject , templatePathes: {GuiObject } ) → () Sets config for info alert.  "},{"title":"SetInfoAlertAnims​","type":1,"pageTitle":"AlertsPackage","url":"/Multilib-Rewrite/api/Alerts Package#SetInfoAlertAnims","content":"&lt;/&gt; Alerts Package:SetInfoAlertAnims(anims: {() → nil}) → () Sets anims for info config.  "},{"title":"SetChoiceAlertConfig​","type":1,"pageTitle":"AlertsPackage","url":"/Multilib-Rewrite/api/Alerts Package#SetChoiceAlertConfig","content":"&lt;/&gt; Alerts Package:SetChoiceAlertConfig( appearWhere: GuiObject , template: GuiObject , templatePathes: {GuiObject } ) → () Sets config for choice alert.  "},{"title":"SetChoiceAlertAnims​","type":1,"pageTitle":"AlertsPackage","url":"/Multilib-Rewrite/api/Alerts Package#SetChoiceAlertAnims","content":"&lt;/&gt; Alerts Package:SetChoiceAlertAnims(anims: {() → nil}) → () Sets anims for choice config. "},{"title":"DropDownMenu","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/DropDownMenu","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#functions","content":" "},{"title":"new​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#new","content":"&lt;/&gt; DropDownMenu.new( model: any, elements: {GuiObject }, IdName: string, DropDownOptions: {}, useSettings: Mtypes.DropDownMenu? ) → &lt;table&gt;-- [DropDownMenu Object] Constructor for DropDownMenu object.  "},{"title":"Init​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#Init","content":"&lt;/&gt; DropDownMenu:Init() → () should be called only via Form:InitAll().  "},{"title":"LockStatus​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#LockStatus","content":"&lt;/&gt; DropDownMenu:LockStatus(status: boolean) → () Changes the DropDownMenu.locked property.  "},{"title":"Append​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#Append","content":"&lt;/&gt; DropDownMenu:Append(where: any) → () Sets the Parent of the DropDownMenu.model.  "},{"title":"AddAction​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#AddAction","content":"&lt;/&gt; DropDownMenu:AddAction( actionName: string, action: any ) → () Adds action that will be executed on every value change.  "},{"title":"RemoveAction​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#RemoveAction","content":"&lt;/&gt; DropDownMenu:RemoveAction(actionName: string) → () Removes action that would be executed on every value change.  "},{"title":"InsertElement​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#InsertElement","content":"&lt;/&gt; DropDownMenu:InsertElement(element: {}) → () Inserts element into the DropDownMenu.RadioButtons table.  "},{"title":"InsertElements​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#InsertElements","content":"&lt;/&gt; DropDownMenu:InsertElements(elements: {}) → () Inserts multiple elements into the DropDownMenu.RadioButtons table.  "},{"title":"ClearElement​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#ClearElement","content":"&lt;/&gt; DropDownMenu:ClearElement(ElementName: string) → () Removes element from the DropDownMenu.RadioButtons table.  "},{"title":"ClearAllElements​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#ClearAllElements","content":"&lt;/&gt; DropDownMenu:ClearAllElements() → () Clears the DropDownMenu.RadioButtons table.  "},{"title":"ReturnValues​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#ReturnValues","content":"&lt;/&gt; DropDownMenu:ReturnValues() → &lt;boolean,string&gt;-- [value and IdName of the object] Returns value and IdName of the object.  "},{"title":"Destroy​","type":1,"pageTitle":"DropDownMenu","url":"/Multilib-Rewrite/api/DropDownMenu#Destroy","content":"&lt;/&gt; DropDownMenu:Destroy() → () Destructor for DropDownMenu object. "},{"title":"Form","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Form","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#new","content":"&lt;/&gt; Form.new() → &lt;table&gt;-- [Form Object] Constructor for Form object.  "},{"title":"InsertElement​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#InsertElement","content":"&lt;/&gt; Form:InsertElement(element: {}) → () Inserts element into the Form.Elements table.  "},{"title":"InsertElements​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#InsertElements","content":"&lt;/&gt; Form:InsertElements(Elements: {}) → () Inserts multiple Elements into the Form.Elements table.  "},{"title":"ClearElement​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#ClearElement","content":"&lt;/&gt; Form:ClearElement(ElementName: string) → () Removes element from the Form.Elements table.  "},{"title":"ClearAllElements​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#ClearAllElements","content":"&lt;/&gt; Form:ClearAllElements() → () Clears the Form.Elements table.  "},{"title":"InitAll​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#InitAll","content":"&lt;/&gt; Form:InitAll() → () Initializes all Elements inside Form.Elements table.  "},{"title":"AppendAll​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#AppendAll","content":"&lt;/&gt; Form:AppendAll(where: any) → () Sets Parent for all Elements inside Form.Elements table.  "},{"title":"Validate​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#Validate","content":"&lt;/&gt; Form:Validate() → &lt;boolean&gt;-- [true if everything is alright, false if there are problems] Validates the data.  "},{"title":"CollectData​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#CollectData","content":"&lt;/&gt; Form:CollectData() → &lt;table&gt;-- [table of all data] Collects all the data from the form.  "},{"title":"Destroy​","type":1,"pageTitle":"Form","url":"/Multilib-Rewrite/api/Form#Destroy","content":"&lt;/&gt; Form:Destroy() → () Destructor for Form object. "},{"title":"InputField","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/InputField","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"InputField","url":"/Multilib-Rewrite/api/InputField#functions","content":" "},{"title":"new​","type":1,"pageTitle":"InputField","url":"/Multilib-Rewrite/api/InputField#new","content":"&lt;/&gt; InputField.new( model: any, elements: {GuiObject }, IdName: string, useSettings: Mtypes.InputField? ) → &lt;table&gt;-- [InputField Object] Constructor for InputField object.  "},{"title":"Init​","type":1,"pageTitle":"InputField","url":"/Multilib-Rewrite/api/InputField#Init","content":"&lt;/&gt; InputField:Init() → () should be called only via Form:InitAll().  "},{"title":"ReturnValues​","type":1,"pageTitle":"InputField","url":"/Multilib-Rewrite/api/InputField#ReturnValues","content":"&lt;/&gt; InputField:ReturnValues() → &lt;boolean,string&gt;-- [value and IdName of the object] Returns value and IdName of the object.  "},{"title":"LockStatus​","type":1,"pageTitle":"InputField","url":"/Multilib-Rewrite/api/InputField#LockStatus","content":"&lt;/&gt; InputField:LockStatus(status: boolean) → () Changes the InputField.locked property.  "},{"title":"Append​","type":1,"pageTitle":"InputField","url":"/Multilib-Rewrite/api/InputField#Append","content":"&lt;/&gt; InputField:Append(where: any) → () Sets the Parent of the InputField.model.  "},{"title":"AddAction​","type":1,"pageTitle":"InputField","url":"/Multilib-Rewrite/api/InputField#AddAction","content":"&lt;/&gt; InputField:AddAction( actionName: string, action: any ) → () Adds action that will be executed on every value change.  "},{"title":"RemoveAction​","type":1,"pageTitle":"InputField","url":"/Multilib-Rewrite/api/InputField#RemoveAction","content":"&lt;/&gt; InputField:RemoveAction(actionName: string) → () Removes action that would be executed on every value change.  "},{"title":"Destroy​","type":1,"pageTitle":"InputField","url":"/Multilib-Rewrite/api/InputField#Destroy","content":"&lt;/&gt; InputField:Destroy() → () Destructor for InputField object. "},{"title":"ReceiptProcessorClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/ReceiptProcessor Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ReceiptProcessorClass","url":"/Multilib-Rewrite/api/ReceiptProcessor Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ReceiptProcessorClass","url":"/Multilib-Rewrite/api/ReceiptProcessor Class#new","content":"&lt;/&gt; ReceiptProcessor Class.new() → &lt;ReceiptProcessorClass&gt; Creates ReceiptProcessor Class.  "},{"title":"AddListener​","type":1,"pageTitle":"ReceiptProcessorClass","url":"/Multilib-Rewrite/api/ReceiptProcessor Class#AddListener","content":"&lt;/&gt; ReceiptProcessor Class:AddListener( id: number, FuncAfter: () → nil ) → () Adds listener and a function connected to it.  "},{"title":"Destroy​","type":1,"pageTitle":"ReceiptProcessorClass","url":"/Multilib-Rewrite/api/ReceiptProcessor Class#Destroy","content":"&lt;/&gt; ReceiptProcessor Class:Destroy() → () Destroys ReceiptProcessor Class. "},{"title":"NotificationsPackage","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Notifications Package","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"NotificationsPackage","url":"/Multilib-Rewrite/api/Notifications Package#functions","content":" "},{"title":"AppendBigNotif​","type":1,"pageTitle":"NotificationsPackage","url":"/Multilib-Rewrite/api/Notifications Package#AppendBigNotif","content":"&lt;/&gt; Notifications Package:AppendBigNotif( title: string, description: string, imageID: number? ) → () Appends big notification on screen.  "},{"title":"AppendSmallNotif​","type":1,"pageTitle":"NotificationsPackage","url":"/Multilib-Rewrite/api/Notifications Package#AppendSmallNotif","content":"&lt;/&gt; Notifications Package:AppendSmallNotif( title: string, description: string, imageID: number? ) → () Appends small notification on screen.  "},{"title":"SetBigNotifConfig​","type":1,"pageTitle":"NotificationsPackage","url":"/Multilib-Rewrite/api/Notifications Package#SetBigNotifConfig","content":"&lt;/&gt; Notifications Package:SetBigNotifConfig( time: number, appearWhere: GuiObject , template: GuiObject , templatePathes: {GuiObject } ) → () Sets config for big notification.  "},{"title":"SetSmallNotifConfig​","type":1,"pageTitle":"NotificationsPackage","url":"/Multilib-Rewrite/api/Notifications Package#SetSmallNotifConfig","content":"&lt;/&gt; Notifications Package:SetSmallNotifConfig( time: number, appearWhere: GuiObject , template: GuiObject , templatePathes: {GuiObject }, positionLogic: any? ) → () Sets config for small notification.  "},{"title":"SetBigNotifAnimations​","type":1,"pageTitle":"NotificationsPackage","url":"/Multilib-Rewrite/api/Notifications Package#SetBigNotifAnimations","content":"&lt;/&gt; Notifications Package:SetBigNotifAnimations(anims: {}) → () Sets animations for big notification.  "},{"title":"SetSmallNotifAnimations​","type":1,"pageTitle":"NotificationsPackage","url":"/Multilib-Rewrite/api/Notifications Package#SetSmallNotifAnimations","content":"&lt;/&gt; Notifications Package:SetSmallNotifAnimations(anims: {}) → () Sets animations for small notification.  "},{"title":"SetPadding​","type":1,"pageTitle":"NotificationsPackage","url":"/Multilib-Rewrite/api/Notifications Package#SetPadding","content":"&lt;/&gt; Notifications Package:SetPadding(padding: number) → () Sets padding for small notification. "},{"title":"ReasonToClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/ReasonTo Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ReasonToClass","url":"/Multilib-Rewrite/api/ReasonTo Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ReasonToClass","url":"/Multilib-Rewrite/api/ReasonTo Class#new","content":"&lt;/&gt; ReasonTo Class.new() → &lt;ReasonToClass&gt; Creates ReasonTo Class.  "},{"title":"AddAnyReason​","type":1,"pageTitle":"ReasonToClass","url":"/Multilib-Rewrite/api/ReasonTo Class#AddAnyReason","content":"&lt;/&gt; ReasonTo Class:AddAnyReason( time: number?, funcAfter: () → nil? ) → () Adds any reason to ReasonTo Class.  "},{"title":"AddSpecificReason​","type":1,"pageTitle":"ReasonToClass","url":"/Multilib-Rewrite/api/ReasonTo Class#AddSpecificReason","content":"&lt;/&gt; ReasonTo Class:AddSpecificReason( reasonName: string, funcAfter: () → nil? ) → () Adds specific reason to ReasonTo Class.  "},{"title":"RemoveSpecificReason​","type":1,"pageTitle":"ReasonToClass","url":"/Multilib-Rewrite/api/ReasonTo Class#RemoveSpecificReason","content":"&lt;/&gt; ReasonTo Class:RemoveSpecificReason(reasonName: string) → () Removes specific reason from ReasonTo Class.  "},{"title":"ClearReasons​","type":1,"pageTitle":"ReasonToClass","url":"/Multilib-Rewrite/api/ReasonTo Class#ClearReasons","content":"&lt;/&gt; ReasonTo Class:ClearReasons() → () Removes all reasons from ReasonTo Class.  "},{"title":"CanProceed​","type":1,"pageTitle":"ReasonToClass","url":"/Multilib-Rewrite/api/ReasonTo Class#CanProceed","content":"&lt;/&gt; ReasonTo Class:CanProceed() → &lt;true | false&gt; Checks if there is any reason to not do something.  "},{"title":"Destroy​","type":1,"pageTitle":"ReasonToClass","url":"/Multilib-Rewrite/api/ReasonTo Class#Destroy","content":"&lt;/&gt; ReasonTo Class:Destroy() → () Destroys ReasonTo Class. "},{"title":"RaycasterClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Raycaster Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RaycasterClass","url":"/Multilib-Rewrite/api/Raycaster Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RaycasterClass","url":"/Multilib-Rewrite/api/Raycaster Class#new","content":"&lt;/&gt; Raycaster Class.new(params: RaycastParams) → &lt;RaycasterClass&gt; Returns Raycaster Class.  "},{"title":"RayFromTo​","type":1,"pageTitle":"RaycasterClass","url":"/Multilib-Rewrite/api/Raycaster Class#RayFromTo","content":"&lt;/&gt; Raycaster Class:RayFromTo( from: Vector3 , to: Vector3 , strength: number ) → &lt;RaycastResult | false&gt; Fires ray from given location to given location using given strength.  "},{"title":"Destroy​","type":1,"pageTitle":"RaycasterClass","url":"/Multilib-Rewrite/api/Raycaster Class#Destroy","content":"&lt;/&gt; Raycaster Class:Destroy() → () Destroys Raycaster Class. "},{"title":"SimpleSpringClass","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/SimpleSpring Class","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SimpleSpringClass","url":"/Multilib-Rewrite/api/SimpleSpring Class#functions","content":" "},{"title":"new​","type":1,"pageTitle":"SimpleSpringClass","url":"/Multilib-Rewrite/api/SimpleSpring Class#new","content":"&lt;/&gt; SimpleSpring Class.new( position: number, target: number, speed: number, constant: number ) → &lt;SimpleSpringClass&gt; Creates SimpleSpring Class.  "},{"title":"SetTarget​","type":1,"pageTitle":"SimpleSpringClass","url":"/Multilib-Rewrite/api/SimpleSpring Class#SetTarget","content":"&lt;/&gt; SimpleSpring Class:SetTarget(target: number) → () Sets target for spring.  "},{"title":"Update​","type":1,"pageTitle":"SimpleSpringClass","url":"/Multilib-Rewrite/api/SimpleSpring Class#Update","content":"&lt;/&gt; SimpleSpring Class:Update(deltaTime: number) → () Updates the spring position.  "},{"title":"Destroy​","type":1,"pageTitle":"SimpleSpringClass","url":"/Multilib-Rewrite/api/SimpleSpring Class#Destroy","content":"&lt;/&gt; SimpleSpring Class:Destroy() → () Deletes SimpleSpring Class. "},{"title":"RadioGroup","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/RadioGroup","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#new","content":"&lt;/&gt; RadioGroup.new(IdName: string) → &lt;table&gt;-- [RadioGroup Object] Constructor for RadioGroup object.  "},{"title":"Init​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#Init","content":"&lt;/&gt; RadioGroup:Init() → () should be called only via Form:InitAll().  "},{"title":"ReturnValues​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#ReturnValues","content":"&lt;/&gt; RadioGroup:ReturnValues() → &lt;string,string&gt;-- [IdName of Selected and IdName of the object] Returns IdName of Selected and IdName of the object.  "},{"title":"InsertElement​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#InsertElement","content":"&lt;/&gt; RadioGroup:InsertElement(element: {}) → () Inserts element into the RadioGroup.RadioButtons table.  "},{"title":"InsertElements​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#InsertElements","content":"&lt;/&gt; RadioGroup:InsertElements(elements: {}) → () Inserts multiple elements into the RadioGroup.RadioButtons table.  "},{"title":"ClearElement​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#ClearElement","content":"&lt;/&gt; RadioGroup:ClearElement(ElementName: string) → () Removes element from the RadioGroup.RadioButtons table.  "},{"title":"ClearAllElements​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#ClearAllElements","content":"&lt;/&gt; RadioGroup:ClearAllElements() → () Clears the RadioGroup.RadioButtons table.  "},{"title":"Append​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#Append","content":"&lt;/&gt; RadioGroup:Append(where: any) → () Sets the Parent of every radioButton.  "},{"title":"AddAction​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#AddAction","content":"&lt;/&gt; RadioGroup:AddAction( actionName: string, action: any ) → () Adds action that will be executed on every value change.  "},{"title":"RemoveAction​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#RemoveAction","content":"&lt;/&gt; RadioGroup:RemoveAction(actionName: string) → () Removes action that would be executed on every value change.  "},{"title":"Destroy​","type":1,"pageTitle":"RadioGroup","url":"/Multilib-Rewrite/api/RadioGroup#Destroy","content":"&lt;/&gt; RadioGroup:Destroy() → () Destructor for RadioGroup object. "},{"title":"Slider","type":0,"sectionRef":"#","url":"/Multilib-Rewrite/api/Slider","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Slider","url":"/Multilib-Rewrite/api/Slider#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Slider","url":"/Multilib-Rewrite/api/Slider#new","content":"&lt;/&gt; Slider.new( model: any, elements: {GuiObject }, IdName: string, useSettings: Mtypes.Slider? ) → &lt;table&gt;-- [Slider Object] Constructor for Slider object.  "},{"title":"Init​","type":1,"pageTitle":"Slider","url":"/Multilib-Rewrite/api/Slider#Init","content":"&lt;/&gt; Slider:Init() → () should be called only via Form:InitAll().  "},{"title":"AddAction​","type":1,"pageTitle":"Slider","url":"/Multilib-Rewrite/api/Slider#AddAction","content":"&lt;/&gt; Slider:AddAction( actionName: string, action: any ) → () Adds action that will be executed on every value change.  "},{"title":"RemoveAction​","type":1,"pageTitle":"Slider","url":"/Multilib-Rewrite/api/Slider#RemoveAction","content":"&lt;/&gt; Slider:RemoveAction(actionName: string) → () Removes action that would be executed on every value change.  "},{"title":"ReturnValues​","type":1,"pageTitle":"Slider","url":"/Multilib-Rewrite/api/Slider#ReturnValues","content":"&lt;/&gt; Slider:ReturnValues() → &lt;boolean,string&gt;-- [value and IdName of the object] Returns value and IdName of the object.  "},{"title":"LockStatus​","type":1,"pageTitle":"Slider","url":"/Multilib-Rewrite/api/Slider#LockStatus","content":"&lt;/&gt; Slider:LockStatus(status: boolean) → () Changes the Slider.locked property.  "},{"title":"Append​","type":1,"pageTitle":"Slider","url":"/Multilib-Rewrite/api/Slider#Append","content":"&lt;/&gt; Slider:Append(where: any) → () Sets the Parent of the Slider.model.  "},{"title":"Destroy​","type":1,"pageTitle":"Slider","url":"/Multilib-Rewrite/api/Slider#Destroy","content":"&lt;/&gt; Slider:Destroy() → () Destructor for Slider object. "}]